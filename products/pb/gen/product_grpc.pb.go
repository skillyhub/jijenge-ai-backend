// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: pb/product.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProductService_CreateFinancialInstitution_FullMethodName  = "/product.ProductService/CreateFinancialInstitution"
	ProductService_CreateCriteria_FullMethodName              = "/product.ProductService/CreateCriteria"
	ProductService_GetCriteriaById_FullMethodName             = "/product.ProductService/GetCriteriaById"
	ProductService_ListCriteriaByInstitutionId_FullMethodName = "/product.ProductService/ListCriteriaByInstitutionId"
)

// ProductServiceClient is the client API for ProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductServiceClient interface {
	CreateFinancialInstitution(ctx context.Context, in *CreateFinancialInstitutionRequest, opts ...grpc.CallOption) (*CreateFinancialInstitutionResponse, error)
	CreateCriteria(ctx context.Context, in *CreateCriteriaRequest, opts ...grpc.CallOption) (*CreateCriteriaResponse, error)
	GetCriteriaById(ctx context.Context, in *GetCriteriaRequest, opts ...grpc.CallOption) (*GetCriteriaResponse, error)
	ListCriteriaByInstitutionId(ctx context.Context, in *ListCriteriaByInstitutionIdRequest, opts ...grpc.CallOption) (*ListCriteriaByInstitutionIdResponse, error)
}

type productServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductServiceClient(cc grpc.ClientConnInterface) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) CreateFinancialInstitution(ctx context.Context, in *CreateFinancialInstitutionRequest, opts ...grpc.CallOption) (*CreateFinancialInstitutionResponse, error) {
	out := new(CreateFinancialInstitutionResponse)
	err := c.cc.Invoke(ctx, ProductService_CreateFinancialInstitution_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateCriteria(ctx context.Context, in *CreateCriteriaRequest, opts ...grpc.CallOption) (*CreateCriteriaResponse, error) {
	out := new(CreateCriteriaResponse)
	err := c.cc.Invoke(ctx, ProductService_CreateCriteria_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetCriteriaById(ctx context.Context, in *GetCriteriaRequest, opts ...grpc.CallOption) (*GetCriteriaResponse, error) {
	out := new(GetCriteriaResponse)
	err := c.cc.Invoke(ctx, ProductService_GetCriteriaById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) ListCriteriaByInstitutionId(ctx context.Context, in *ListCriteriaByInstitutionIdRequest, opts ...grpc.CallOption) (*ListCriteriaByInstitutionIdResponse, error) {
	out := new(ListCriteriaByInstitutionIdResponse)
	err := c.cc.Invoke(ctx, ProductService_ListCriteriaByInstitutionId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServiceServer is the server API for ProductService service.
// All implementations must embed UnimplementedProductServiceServer
// for forward compatibility
type ProductServiceServer interface {
	CreateFinancialInstitution(context.Context, *CreateFinancialInstitutionRequest) (*CreateFinancialInstitutionResponse, error)
	CreateCriteria(context.Context, *CreateCriteriaRequest) (*CreateCriteriaResponse, error)
	GetCriteriaById(context.Context, *GetCriteriaRequest) (*GetCriteriaResponse, error)
	ListCriteriaByInstitutionId(context.Context, *ListCriteriaByInstitutionIdRequest) (*ListCriteriaByInstitutionIdResponse, error)
	mustEmbedUnimplementedProductServiceServer()
}

// UnimplementedProductServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductServiceServer struct {
}

func (UnimplementedProductServiceServer) CreateFinancialInstitution(context.Context, *CreateFinancialInstitutionRequest) (*CreateFinancialInstitutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFinancialInstitution not implemented")
}
func (UnimplementedProductServiceServer) CreateCriteria(context.Context, *CreateCriteriaRequest) (*CreateCriteriaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCriteria not implemented")
}
func (UnimplementedProductServiceServer) GetCriteriaById(context.Context, *GetCriteriaRequest) (*GetCriteriaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCriteriaById not implemented")
}
func (UnimplementedProductServiceServer) ListCriteriaByInstitutionId(context.Context, *ListCriteriaByInstitutionIdRequest) (*ListCriteriaByInstitutionIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCriteriaByInstitutionId not implemented")
}
func (UnimplementedProductServiceServer) mustEmbedUnimplementedProductServiceServer() {}

// UnsafeProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServiceServer will
// result in compilation errors.
type UnsafeProductServiceServer interface {
	mustEmbedUnimplementedProductServiceServer()
}

func RegisterProductServiceServer(s grpc.ServiceRegistrar, srv ProductServiceServer) {
	s.RegisterService(&ProductService_ServiceDesc, srv)
}

func _ProductService_CreateFinancialInstitution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFinancialInstitutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateFinancialInstitution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_CreateFinancialInstitution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateFinancialInstitution(ctx, req.(*CreateFinancialInstitutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateCriteria_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCriteriaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).CreateCriteria(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_CreateCriteria_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).CreateCriteria(ctx, req.(*CreateCriteriaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetCriteriaById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCriteriaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetCriteriaById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetCriteriaById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetCriteriaById(ctx, req.(*GetCriteriaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_ListCriteriaByInstitutionId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCriteriaByInstitutionIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).ListCriteriaByInstitutionId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_ListCriteriaByInstitutionId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).ListCriteriaByInstitutionId(ctx, req.(*ListCriteriaByInstitutionIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductService_ServiceDesc is the grpc.ServiceDesc for ProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product.ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFinancialInstitution",
			Handler:    _ProductService_CreateFinancialInstitution_Handler,
		},
		{
			MethodName: "CreateCriteria",
			Handler:    _ProductService_CreateCriteria_Handler,
		},
		{
			MethodName: "GetCriteriaById",
			Handler:    _ProductService_GetCriteriaById_Handler,
		},
		{
			MethodName: "ListCriteriaByInstitutionId",
			Handler:    _ProductService_ListCriteriaByInstitutionId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/product.proto",
}
