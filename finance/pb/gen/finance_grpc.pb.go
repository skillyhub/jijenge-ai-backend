// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: pb/finance.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FinanceService_CreateFinance_FullMethodName           = "/finance.FinanceService/CreateFinance"
	FinanceService_AddTransaction_FullMethodName          = "/finance.FinanceService/AddTransaction"
	FinanceService_GetTransactions_FullMethodName         = "/finance.FinanceService/GetTransactions"
	FinanceService_GetFinancialSummary_FullMethodName     = "/finance.FinanceService/GetFinancialSummary"
	FinanceService_TransferBetweenFinances_FullMethodName = "/finance.FinanceService/TransferBetweenFinances"
)

// FinanceServiceClient is the client API for FinanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FinanceServiceClient interface {
	CreateFinance(ctx context.Context, in *CreateFinanceRequest, opts ...grpc.CallOption) (*CreateFinanceResponse, error)
	AddTransaction(ctx context.Context, in *AddTransactionRequest, opts ...grpc.CallOption) (*AddTransactionResponse, error)
	GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (*GetTransactionsResponse, error)
	GetFinancialSummary(ctx context.Context, in *GetFinancialSummaryRequest, opts ...grpc.CallOption) (*GetFinancialSummaryResponse, error)
	TransferBetweenFinances(ctx context.Context, in *TransferBetweenFinancesRequest, opts ...grpc.CallOption) (*TransferBetweenFinancesResponse, error)
}

type financeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFinanceServiceClient(cc grpc.ClientConnInterface) FinanceServiceClient {
	return &financeServiceClient{cc}
}

func (c *financeServiceClient) CreateFinance(ctx context.Context, in *CreateFinanceRequest, opts ...grpc.CallOption) (*CreateFinanceResponse, error) {
	out := new(CreateFinanceResponse)
	err := c.cc.Invoke(ctx, FinanceService_CreateFinance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeServiceClient) AddTransaction(ctx context.Context, in *AddTransactionRequest, opts ...grpc.CallOption) (*AddTransactionResponse, error) {
	out := new(AddTransactionResponse)
	err := c.cc.Invoke(ctx, FinanceService_AddTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeServiceClient) GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (*GetTransactionsResponse, error) {
	out := new(GetTransactionsResponse)
	err := c.cc.Invoke(ctx, FinanceService_GetTransactions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeServiceClient) GetFinancialSummary(ctx context.Context, in *GetFinancialSummaryRequest, opts ...grpc.CallOption) (*GetFinancialSummaryResponse, error) {
	out := new(GetFinancialSummaryResponse)
	err := c.cc.Invoke(ctx, FinanceService_GetFinancialSummary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financeServiceClient) TransferBetweenFinances(ctx context.Context, in *TransferBetweenFinancesRequest, opts ...grpc.CallOption) (*TransferBetweenFinancesResponse, error) {
	out := new(TransferBetweenFinancesResponse)
	err := c.cc.Invoke(ctx, FinanceService_TransferBetweenFinances_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FinanceServiceServer is the server API for FinanceService service.
// All implementations must embed UnimplementedFinanceServiceServer
// for forward compatibility
type FinanceServiceServer interface {
	CreateFinance(context.Context, *CreateFinanceRequest) (*CreateFinanceResponse, error)
	AddTransaction(context.Context, *AddTransactionRequest) (*AddTransactionResponse, error)
	GetTransactions(context.Context, *GetTransactionsRequest) (*GetTransactionsResponse, error)
	GetFinancialSummary(context.Context, *GetFinancialSummaryRequest) (*GetFinancialSummaryResponse, error)
	TransferBetweenFinances(context.Context, *TransferBetweenFinancesRequest) (*TransferBetweenFinancesResponse, error)
	mustEmbedUnimplementedFinanceServiceServer()
}

// UnimplementedFinanceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFinanceServiceServer struct {
}

func (UnimplementedFinanceServiceServer) CreateFinance(context.Context, *CreateFinanceRequest) (*CreateFinanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFinance not implemented")
}
func (UnimplementedFinanceServiceServer) AddTransaction(context.Context, *AddTransactionRequest) (*AddTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTransaction not implemented")
}
func (UnimplementedFinanceServiceServer) GetTransactions(context.Context, *GetTransactionsRequest) (*GetTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactions not implemented")
}
func (UnimplementedFinanceServiceServer) GetFinancialSummary(context.Context, *GetFinancialSummaryRequest) (*GetFinancialSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFinancialSummary not implemented")
}
func (UnimplementedFinanceServiceServer) TransferBetweenFinances(context.Context, *TransferBetweenFinancesRequest) (*TransferBetweenFinancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferBetweenFinances not implemented")
}
func (UnimplementedFinanceServiceServer) mustEmbedUnimplementedFinanceServiceServer() {}

// UnsafeFinanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FinanceServiceServer will
// result in compilation errors.
type UnsafeFinanceServiceServer interface {
	mustEmbedUnimplementedFinanceServiceServer()
}

func RegisterFinanceServiceServer(s grpc.ServiceRegistrar, srv FinanceServiceServer) {
	s.RegisterService(&FinanceService_ServiceDesc, srv)
}

func _FinanceService_CreateFinance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFinanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServiceServer).CreateFinance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceService_CreateFinance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServiceServer).CreateFinance(ctx, req.(*CreateFinanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceService_AddTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServiceServer).AddTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceService_AddTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServiceServer).AddTransaction(ctx, req.(*AddTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceService_GetTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServiceServer).GetTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceService_GetTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServiceServer).GetTransactions(ctx, req.(*GetTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceService_GetFinancialSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFinancialSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServiceServer).GetFinancialSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceService_GetFinancialSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServiceServer).GetFinancialSummary(ctx, req.(*GetFinancialSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinanceService_TransferBetweenFinances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferBetweenFinancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinanceServiceServer).TransferBetweenFinances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinanceService_TransferBetweenFinances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinanceServiceServer).TransferBetweenFinances(ctx, req.(*TransferBetweenFinancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FinanceService_ServiceDesc is the grpc.ServiceDesc for FinanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FinanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "finance.FinanceService",
	HandlerType: (*FinanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFinance",
			Handler:    _FinanceService_CreateFinance_Handler,
		},
		{
			MethodName: "AddTransaction",
			Handler:    _FinanceService_AddTransaction_Handler,
		},
		{
			MethodName: "GetTransactions",
			Handler:    _FinanceService_GetTransactions_Handler,
		},
		{
			MethodName: "GetFinancialSummary",
			Handler:    _FinanceService_GetFinancialSummary_Handler,
		},
		{
			MethodName: "TransferBetweenFinances",
			Handler:    _FinanceService_TransferBetweenFinances_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/finance.proto",
}
